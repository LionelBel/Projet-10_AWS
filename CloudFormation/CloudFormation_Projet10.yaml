### CloudFormation automatiser l'installation de notre infrastructure sur AWS ###

### Nos services sont dans la Zone de disponibilité AWS Europe(Paris):eu-west-3 ###

################################
### Infrastructure du réseau ###
################################
#######################################################################################
## Création du VPC dans lequel nous allons mettre en place nos machines
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Projet 10
Resources:
  Projet10VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16 
      Tags:
        - Key: Name
          Value: 'Projet10-VPC'

## Création des sous-réseaux dans les différentes zones de disponibilités
# Sous-réseau public-1 dans la zone de disponibilité "a"
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3a
      CidrBlock: 10.0.100.0/24  
      Tags:
        - Key: Name
          Value: 'Wordpress-public-1'
      VpcId: !Ref Projet10VPC

        ########################################

# Sous-réseau public-2 dans la zone de disponibilité "b"
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3b
      CidrBlock: 10.0.200.0/24 
      Tags:
        - Key: Name
          Value: 'Wordpress-public-2'
      VpcId: !Ref Projet10VPC

        ########################################

# Sous-réseau privé-1 dans la zone de disponibilité "c"
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3c
      CidrBlock: 10.0.1.0/24 
      Tags:
        - Key: Name
          Value: 'VPN'
      VpcId: !Ref Projet10VPC

        ########################################

# Sous-réseau privé-2 dans la zone de disponibilité "c"
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3c
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: 'INTRANET'
      VpcId: !Ref Projet10VPC

#######################################################################################
## Création de la passerelle internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: 'MainVPC-InternetGateway'

# Attache de la passerelle internet à MainVPC
  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref Projet10VPC
      InternetGatewayId: !Ref InternetGateway

#######################################################################################
## Création des tables de routages, association aux sous-réseaux et création des routes
# Création des tables de routages 'Wordpress-public-1'
  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Projet10VPC
      Tags:
        - Key: Name
          Value: Wordpress-route-public-1

# Attache au sous-réseau 'Wordpress-public-1'
  AttachPublicRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA

# Routes pour sous-réseau 'Wordpress-public-1'
  PublicRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableA

        ########################################

# Création des tables de routages 'Wordpress-public-2'
  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Projet10VPC
      Tags:
        - Key: Name
          Value: Wordpress-route-public-2

# Attache au sous-réseau 'Wordpress-public-2'
  AttachPublicRouteTableB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      SubnetId: !Ref PublicSubnetB

# Routes pour sous-réseau 'Wordpress-public-2'
  PublicRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableB

        ########################################

# Création des tables de routages 'VPN'
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Projet10VPC
      Tags:
        - Key: Name
          Value: VPN-route

# Attache au sous-réseau 'VPN'
  AttachPrivateRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

# Routes pour sous-réseau 'VPN'
  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PrivateRouteTableA

        ########################################


# Création des tables de routages 'INTRANET'
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref Projet10VPC
      Tags:
        - Key: Name
          Value: Intranet-route

# Attache au sous-réseau 'INTRANET'
  AttachPrivateRouteTableB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

# Routes pour sous-réseau 'INTRANET'
  PrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref VPNInstance
      RouteTableId: !Ref PrivateRouteTableB

#######################################################################################
#######################################################################################

################################
### Infrastructure du système ###
#################################

## Création de l'infrastrucutre système

# Création solution Amazon S3
  projet10:
    Type: AWS::S3::Bucket
    Description: Bucket S3 AWS
    Properties:
      BucketName: s3-projet-10

        ########################################

## Création du DBSubnetGroup
  WordpressDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Goupe des SubnetPublicA et SubnetPublicB
      DBSubnetGroupName: rds-subnetGroup
      SubnetIds:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Tags:
        -
          Key: Name
          Value: RDSSubnetGroup

## Création de la base de données MariaDB
  WordpressDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBSubnetGroupName: !Ref WordpressDBSubnetGroup
      AllocatedStorage: '20'
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: BD-Wordpress
      Engine: mariadb
      DBName: wordpress
      MasterUsername: wordpress
      MasterUserPassword: wordpress
      PubliclyAccessible: "false"
      MultiAZ: "true"
      VPCSecurityGroups:
        - !Ref WordpressEC2SecurityGroup
    DeletionPolicy: Snapshot

#######################################################################################
### Création des instatances Wordpress avec Docker et du LoadBalancer
## Création du SecurityGroup 
  WordpressEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permission HTTP HTTPS et SSH en entree et sortie
      GroupName: Wordpress-SecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 82.64.122.100/32
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/16
      VpcId: !Ref Projet10VPC

        ########################################

## Création de la Launch Configuration des instances Wordpress
  WordpressLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      ImageId: ami-031eb8d942193d84f
      InstanceType: t2.micro
      KeyName: AdminSYS_AWS
      SecurityGroups:
        - !Ref WordpressEC2SecurityGroup
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            yum update -y
            amazon-linux-extras install docker -y
            systemctl enable docker
            systemctl start docker.service
            docker pull lionelbel/wordpress-custom
            docker run --name=wordpress -d -p 80:80 -e WORDPRESS_DB_HOST=${rdshostname} lionelbel/wordpress-custom:latest
            docker exec wordpress /var/www/install-site-wp.sh ${lbdnsname}
          - rdshostname: !GetAtt WordpressDB.Endpoint.Address
            lbdnsname: !GetAtt WordpressLoadBalancer.DNSName

        ########################################

## Création de L'auto Scaling Group
  WordpressAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref WordpressLaunchConfig
      AvailabilityZones:
        - eu-west-3a
        - eu-west-3b
      VPCZoneIdentifier: 
        - !Ref PublicSubnetA 
        - !Ref PublicSubnetB
      DesiredCapacity: 2
      MaxSize: 3
      MinSize: 2
      TargetGroupARNs: 
        - !Ref WordpressTargetGroup
      Tags:
        - 
          Key: Name
          Value: WordPress
          PropagateAtLaunch: 'true'

        ########################################

## Création du groupe cible (TargetGroup)
  WordpressTargetGroup: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Projet10VPC

        ########################################

### Création de de la surveillance du CPU avec envoie Mail
## Création du scaling Policy
  WordpressScalePolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WordpressAutoScalingGroup
      ScalingAdjustment: '1'

        ########################################

## Création de l'alerte CPU
  WordpressCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '80'
      AlarmDescription: Alerte 80% de CPU utiliser
      Period: '300'
      AlarmActions:
        - !Ref WordpressScalePolicy
        - !Ref WordpressEmailNotification
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: WordpressAutoScalingGroup
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: CPUUtilization

        ########################################

## Création de la notification de l'alerte
  WordpressEmailNotification:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: lionel.bellerose@outlook.com
          Protocol: email

        ########################################

## Création du security Group du LoadBalancer
  WordpressLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permission HTTP HTTPS
      GroupName: LoadBalancer-SecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref Projet10VPC

        ########################################

## Création du LoadBalancer 
  WordpressLoadBalancer: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: Projet-10
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref WordpressLBSecurityGroup
      Subnets:  
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB

        ########################################

## Configuration des port d'écoute du LoadBalancer
  WordpressLoadBlancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      LoadBalancerArn: !Ref WordpressLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WordpressTargetGroup

#######################################################################################
### Création des instatances VPN et intranet
## Création du SecurityGroup
  VPNSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permission des ports 500 et 4500 StrongSwan
      GroupName: VPN-SecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 500
          ToPort: 500
          CidrIp: 82.64.122.100/32
        - IpProtocol: udp
          FromPort: 500
          ToPort: 500
          CidrIp: 82.64.122.100/32
        - IpProtocol: tcp
          FromPort: 4500
          ToPort: 4500
          CidrIp: 82.64.122.100/32
        - IpProtocol: udp
          FromPort: 4500
          ToPort: 4500
          CidrIp: 82.64.122.100/32
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 82.64.122.100/32
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref Projet10VPC

        ########################################

## Création Instance VPN
  VPNInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-03893f53361ae7122
      KeyName: "VPN"
      AvailabilityZone: eu-west-3c
      SubnetId: !Ref PrivateSubnetA
      PrivateIpAddress: 10.0.1.114
      SecurityGroupIds:
        - !Ref VPNSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          ip tunnel add ipsec0 local 10.0.1.38 remote 0.0.0.0 mode vti key 42
          ip link set ipsec0 up
          ip route add 192.168.1.0/24 dev ipsec0
          ip route add 192.168.10.0/24 dev ipsec0
          strongswan start
      Tags: 
        - 
          Key: Name
          Value: VPNDistant
          
        ########################################


## Allocation de EIP au VPN
  VPNEIPAssaociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref VPNInstance
      EIP: 35.180.167.34

        ########################################

##Création instance IntraNet
  IntranetInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-031eb8d942193d84f
      KeyName: "VPN"
      AvailabilityZone: eu-west-3c
      SubnetId: !Ref PrivateSubnetB
      PrivateIpAddress: 10.0.2.100
      SecurityGroupIds:
        - !Ref VPNSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          yum install -y httpd 
          systemctl enable httpd
          systemctl start httpd
      Tags:
        - 
          Key: Name
          Value: IntraNet
        